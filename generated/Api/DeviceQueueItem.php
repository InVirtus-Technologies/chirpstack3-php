<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: as/external/api/deviceQueue.proto

namespace Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.DeviceQueueItem</code>
 */
class DeviceQueueItem extends \Google\Protobuf\Internal\Message
{
    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     */
    protected $dev_eui = '';
    /**
     * Set this to true when an acknowledgement from the device is required.
     * Please note that this must not be used to guarantee a delivery.
     *
     * Generated from protobuf field <code>bool confirmed = 2;</code>
     */
    protected $confirmed = false;
    /**
     * Downlink frame-counter.
     * This will be automatically set on enquue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 6;</code>
     */
    protected $f_cnt = 0;
    /**
     * FPort used (must be > 0)
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     */
    protected $f_port = 0;
    /**
     * Base64 encoded data.
     * Or use the json_object field when an application codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     */
    protected $data = '';
    /**
     * JSON object (string).
     * Only use this when an application codec has been configured that can convert
     * this object into binary form.
     *
     * Generated from protobuf field <code>string json_object = 5;</code>
     */
    protected $json_object = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dev_eui
     *           Device EUI (HEX encoded).
     *     @type bool $confirmed
     *           Set this to true when an acknowledgement from the device is required.
     *           Please note that this must not be used to guarantee a delivery.
     *     @type int $f_cnt
     *           Downlink frame-counter.
     *           This will be automatically set on enquue.
     *     @type int $f_port
     *           FPort used (must be > 0)
     *     @type string $data
     *           Base64 encoded data.
     *           Or use the json_object field when an application codec has been configured.
     *     @type string $json_object
     *           JSON object (string).
     *           Only use this when an application codec has been configured that can convert
     *           this object into binary form.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\PBAs\External\Api\DeviceQueue::initOnce();
        parent::__construct($data);
    }

    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, True);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Set this to true when an acknowledgement from the device is required.
     * Please note that this must not be used to guarantee a delivery.
     *
     * Generated from protobuf field <code>bool confirmed = 2;</code>
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->confirmed;
    }

    /**
     * Set this to true when an acknowledgement from the device is required.
     * Please note that this must not be used to guarantee a delivery.
     *
     * Generated from protobuf field <code>bool confirmed = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setConfirmed($var)
    {
        GPBUtil::checkBool($var);
        $this->confirmed = $var;

        return $this;
    }

    /**
     * Downlink frame-counter.
     * This will be automatically set on enquue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 6;</code>
     * @return int
     */
    public function getFCnt()
    {
        return $this->f_cnt;
    }

    /**
     * Downlink frame-counter.
     * This will be automatically set on enquue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setFCnt($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt = $var;

        return $this;
    }

    /**
     * FPort used (must be > 0)
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     * @return int
     */
    public function getFPort()
    {
        return $this->f_port;
    }

    /**
     * FPort used (must be > 0)
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFPort($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_port = $var;

        return $this;
    }

    /**
     * Base64 encoded data.
     * Or use the json_object field when an application codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Base64 encoded data.
     * Or use the json_object field when an application codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

    /**
     * JSON object (string).
     * Only use this when an application codec has been configured that can convert
     * this object into binary form.
     *
     * Generated from protobuf field <code>string json_object = 5;</code>
     * @return string
     */
    public function getJsonObject()
    {
        return $this->json_object;
    }

    /**
     * JSON object (string).
     * Only use this when an application codec has been configured that can convert
     * this object into binary form.
     *
     * Generated from protobuf field <code>string json_object = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setJsonObject($var)
    {
        GPBUtil::checkString($var, True);
        $this->json_object = $var;

        return $this;
    }

}

