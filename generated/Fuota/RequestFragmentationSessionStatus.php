<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: fuota/fuota.proto

namespace Fuota;

use UnexpectedValueException;

/**
 * Protobuf type <code>fuota.RequestFragmentationSessionStatus</code>
 */
class RequestFragmentationSessionStatus
{
    /**
     * Enqueue the fragmentation-session status request command directly after
     * enqueueing the fragmentation-session fragments. This is the recommended
     * option for Class-A devices as the status request will stay in the
     * downlink queue until the device sends its next uplink.
     *
     * Generated from protobuf enum <code>AFTER_FRAGMENT_ENQUEUE = 0;</code>
     */
    const AFTER_FRAGMENT_ENQUEUE = 0;
    /**
     * Enqueue the fragmentation-session status request after the multicast
     * session-timeout. This is the recommended option for Class-B and -C
     * devices as selecting AFTER_FRAGMENT_ENQUEUE will likely cause the NS
     * to schedule the downlink frame during the FUOTA multicast-session.
     *
     * Generated from protobuf enum <code>AFTER_SESSION_TIMEOUT = 1;</code>
     */
    const AFTER_SESSION_TIMEOUT = 1;
    /**
     * Do not request the fragmentation-session status.
     *
     * Generated from protobuf enum <code>NO_REQUEST = 2;</code>
     */
    const NO_REQUEST = 2;

    private static $valueToName = [
        self::AFTER_FRAGMENT_ENQUEUE => 'AFTER_FRAGMENT_ENQUEUE',
        self::AFTER_SESSION_TIMEOUT => 'AFTER_SESSION_TIMEOUT',
        self::NO_REQUEST => 'NO_REQUEST',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

