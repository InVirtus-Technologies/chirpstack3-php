<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ns/ns.proto

namespace Ns;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>ns.DeviceQueueItem</code>
 */
class DeviceQueueItem extends \Google\Protobuf\Internal\Message
{
    /**
     * DevEUI of the device.
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     */
    protected $dev_eui = '';
    /**
     * The encrypted FRMPayload bytes.
     *
     * Generated from protobuf field <code>bytes frm_payload = 2;</code>
     */
    protected $frm_payload = '';
    /**
     * The FCnt of the payload.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 3;</code>
     */
    protected $f_cnt = 0;
    /**
     * The FPort of the payload.
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     */
    protected $f_port = 0;
    /**
     * When set to true, ChirpStack Network Server will wait for the device to ack the
     * received frame.
     *
     * Generated from protobuf field <code>bool confirmed = 5;</code>
     */
    protected $confirmed = false;
    /**
     * Device address (as known by the application-server).
     * It will be used to validate that the application-server is
     * using the correct security context of the device. As on OTAA, there
     * is a gap between the activation and the delivery of the AppSKey to the
     * application-server, there is a possibility that the application-server
     * tries to enqueue payloads encrypted with the old session-key.
     *
     * Generated from protobuf field <code>bytes dev_addr = 6;</code>
     */
    protected $dev_addr = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dev_eui
     *           DevEUI of the device.
     *     @type string $frm_payload
     *           The encrypted FRMPayload bytes.
     *     @type int $f_cnt
     *           The FCnt of the payload.
     *     @type int $f_port
     *           The FPort of the payload.
     *     @type bool $confirmed
     *           When set to true, ChirpStack Network Server will wait for the device to ack the
     *           received frame.
     *     @type string $dev_addr
     *           Device address (as known by the application-server).
     *           It will be used to validate that the application-server is
     *           using the correct security context of the device. As on OTAA, there
     *           is a gap between the activation and the delivery of the AppSKey to the
     *           application-server, there is a possibility that the application-server
     *           tries to enqueue payloads encrypted with the old session-key.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ns\Ns::initOnce();
        parent::__construct($data);
    }

    /**
     * DevEUI of the device.
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * DevEUI of the device.
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * The encrypted FRMPayload bytes.
     *
     * Generated from protobuf field <code>bytes frm_payload = 2;</code>
     * @return string
     */
    public function getFrmPayload()
    {
        return $this->frm_payload;
    }

    /**
     * The encrypted FRMPayload bytes.
     *
     * Generated from protobuf field <code>bytes frm_payload = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setFrmPayload($var)
    {
        GPBUtil::checkString($var, False);
        $this->frm_payload = $var;

        return $this;
    }

    /**
     * The FCnt of the payload.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 3;</code>
     * @return int
     */
    public function getFCnt()
    {
        return $this->f_cnt;
    }

    /**
     * The FCnt of the payload.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFCnt($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt = $var;

        return $this;
    }

    /**
     * The FPort of the payload.
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     * @return int
     */
    public function getFPort()
    {
        return $this->f_port;
    }

    /**
     * The FPort of the payload.
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setFPort($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_port = $var;

        return $this;
    }

    /**
     * When set to true, ChirpStack Network Server will wait for the device to ack the
     * received frame.
     *
     * Generated from protobuf field <code>bool confirmed = 5;</code>
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->confirmed;
    }

    /**
     * When set to true, ChirpStack Network Server will wait for the device to ack the
     * received frame.
     *
     * Generated from protobuf field <code>bool confirmed = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setConfirmed($var)
    {
        GPBUtil::checkBool($var);
        $this->confirmed = $var;

        return $this;
    }

    /**
     * Device address (as known by the application-server).
     * It will be used to validate that the application-server is
     * using the correct security context of the device. As on OTAA, there
     * is a gap between the activation and the delivery of the AppSKey to the
     * application-server, there is a possibility that the application-server
     * tries to enqueue payloads encrypted with the old session-key.
     *
     * Generated from protobuf field <code>bytes dev_addr = 6;</code>
     * @return string
     */
    public function getDevAddr()
    {
        return $this->dev_addr;
    }

    /**
     * Device address (as known by the application-server).
     * It will be used to validate that the application-server is
     * using the correct security context of the device. As on OTAA, there
     * is a gap between the activation and the delivery of the AppSKey to the
     * application-server, there is a possibility that the application-server
     * tries to enqueue payloads encrypted with the old session-key.
     *
     * Generated from protobuf field <code>bytes dev_addr = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setDevAddr($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_addr = $var;

        return $this;
    }

}

