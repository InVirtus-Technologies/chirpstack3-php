<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ns/ns.proto

namespace Ns;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>ns.Gateway</code>
 */
class Gateway extends \Google\Protobuf\Internal\Message
{
    /**
     * Gateway ID (8 bytes EUI64).
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     */
    protected $id = '';
    /**
     * Gateway location.
     *
     * Generated from protobuf field <code>.common.Location location = 2;</code>
     */
    protected $location = null;
    /**
     * ID of the gateway-profile (optional).
     *
     * Generated from protobuf field <code>bytes gateway_profile_id = 3;</code>
     */
    protected $gateway_profile_id = '';
    /**
     * Gateway boards configuration (optional).
     * This is (currently) only needed when the gateway supports the fine-timestamp
     * and you you would like to add the FPGA ID to the gateway meta-data or would
     * like ChirpStack Network Server to decrypt the fine-timestamp.
     *
     * Generated from protobuf field <code>repeated .ns.GatewayBoard boards = 4;</code>
     */
    private $boards;
    /**
     * Routing Profile ID.
     * The routing-profile ID defines to which application-server statistical
     * data for this gateway is forwarded.
     *
     * Generated from protobuf field <code>bytes routing_profile_id = 5;</code>
     */
    protected $routing_profile_id = '';
    /**
     * Service-profile ID (optional).
     *
     * Generated from protobuf field <code>bytes service_profile_id = 6;</code>
     */
    protected $service_profile_id = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Gateway ID (8 bytes EUI64).
     *     @type \Common\Location $location
     *           Gateway location.
     *     @type string $gateway_profile_id
     *           ID of the gateway-profile (optional).
     *     @type array<\Ns\GatewayBoard>|\Google\Protobuf\Internal\RepeatedField $boards
     *           Gateway boards configuration (optional).
     *           This is (currently) only needed when the gateway supports the fine-timestamp
     *           and you you would like to add the FPGA ID to the gateway meta-data or would
     *           like ChirpStack Network Server to decrypt the fine-timestamp.
     *     @type string $routing_profile_id
     *           Routing Profile ID.
     *           The routing-profile ID defines to which application-server statistical
     *           data for this gateway is forwarded.
     *     @type string $service_profile_id
     *           Service-profile ID (optional).
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Ns\Ns::initOnce();
        parent::__construct($data);
    }

    /**
     * Gateway ID (8 bytes EUI64).
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Gateway ID (8 bytes EUI64).
     *
     * Generated from protobuf field <code>bytes id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, False);
        $this->id = $var;

        return $this;
    }

    /**
     * Gateway location.
     *
     * Generated from protobuf field <code>.common.Location location = 2;</code>
     * @return \Common\Location|null
     */
    public function getLocation()
    {
        return $this->location;
    }

    public function hasLocation()
    {
        return isset($this->location);
    }

    public function clearLocation()
    {
        unset($this->location);
    }

    /**
     * Gateway location.
     *
     * Generated from protobuf field <code>.common.Location location = 2;</code>
     * @param \Common\Location $var
     * @return $this
     */
    public function setLocation($var)
    {
        GPBUtil::checkMessage($var, \Common\Location::class);
        $this->location = $var;

        return $this;
    }

    /**
     * ID of the gateway-profile (optional).
     *
     * Generated from protobuf field <code>bytes gateway_profile_id = 3;</code>
     * @return string
     */
    public function getGatewayProfileId()
    {
        return $this->gateway_profile_id;
    }

    /**
     * ID of the gateway-profile (optional).
     *
     * Generated from protobuf field <code>bytes gateway_profile_id = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setGatewayProfileId($var)
    {
        GPBUtil::checkString($var, False);
        $this->gateway_profile_id = $var;

        return $this;
    }

    /**
     * Gateway boards configuration (optional).
     * This is (currently) only needed when the gateway supports the fine-timestamp
     * and you you would like to add the FPGA ID to the gateway meta-data or would
     * like ChirpStack Network Server to decrypt the fine-timestamp.
     *
     * Generated from protobuf field <code>repeated .ns.GatewayBoard boards = 4;</code>
     * @return \Google\Protobuf\Internal\RepeatedField
     */
    public function getBoards()
    {
        return $this->boards;
    }

    /**
     * Gateway boards configuration (optional).
     * This is (currently) only needed when the gateway supports the fine-timestamp
     * and you you would like to add the FPGA ID to the gateway meta-data or would
     * like ChirpStack Network Server to decrypt the fine-timestamp.
     *
     * Generated from protobuf field <code>repeated .ns.GatewayBoard boards = 4;</code>
     * @param array<\Ns\GatewayBoard>|\Google\Protobuf\Internal\RepeatedField $var
     * @return $this
     */
    public function setBoards($var)
    {
        $arr = GPBUtil::checkRepeatedField($var, \Google\Protobuf\Internal\GPBType::MESSAGE, \Ns\GatewayBoard::class);
        $this->boards = $arr;

        return $this;
    }

    /**
     * Routing Profile ID.
     * The routing-profile ID defines to which application-server statistical
     * data for this gateway is forwarded.
     *
     * Generated from protobuf field <code>bytes routing_profile_id = 5;</code>
     * @return string
     */
    public function getRoutingProfileId()
    {
        return $this->routing_profile_id;
    }

    /**
     * Routing Profile ID.
     * The routing-profile ID defines to which application-server statistical
     * data for this gateway is forwarded.
     *
     * Generated from protobuf field <code>bytes routing_profile_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setRoutingProfileId($var)
    {
        GPBUtil::checkString($var, False);
        $this->routing_profile_id = $var;

        return $this;
    }

    /**
     * Service-profile ID (optional).
     *
     * Generated from protobuf field <code>bytes service_profile_id = 6;</code>
     * @return string
     */
    public function getServiceProfileId()
    {
        return $this->service_profile_id;
    }

    /**
     * Service-profile ID (optional).
     *
     * Generated from protobuf field <code>bytes service_profile_id = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setServiceProfileId($var)
    {
        GPBUtil::checkString($var, False);
        $this->service_profile_id = $var;

        return $this;
    }

}

