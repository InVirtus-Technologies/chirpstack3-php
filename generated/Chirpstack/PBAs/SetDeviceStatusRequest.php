<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: as/as.proto

namespace PBAs;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>as.SetDeviceStatusRequest</code>
 */
class SetDeviceStatusRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Device EUI (8 bytes).
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     */
    protected $dev_eui = '';
    /**
     * Battery level (deprecated, use battery_level).
     * 0:      The end-device is connected to an external power source
     * 1..254: The battery level, 1 being at minimum and 254 being at maximum
     * 255:    The end-device was not able to measure the battery level
     *
     * Generated from protobuf field <code>uint32 battery = 2;</code>
     */
    protected $battery = 0;
    /**
     * The device margin status
     * -32..32: The demodulation SNR ration in dB
     *
     * Generated from protobuf field <code>int32 margin = 3;</code>
     */
    protected $margin = 0;
    /**
     * Device is connected to an external power source.
     *
     * Generated from protobuf field <code>bool external_power_source = 4;</code>
     */
    protected $external_power_source = false;
    /**
     * Device battery status is not available.
     *
     * Generated from protobuf field <code>bool battery_level_unavailable = 5;</code>
     */
    protected $battery_level_unavailable = false;
    /**
     * Battery level as a percentage.
     *
     * Generated from protobuf field <code>float battery_level = 6;</code>
     */
    protected $battery_level = 0.0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dev_eui
     *           Device EUI (8 bytes).
     *     @type int $battery
     *           Battery level (deprecated, use battery_level).
     *           0:      The end-device is connected to an external power source
     *           1..254: The battery level, 1 being at minimum and 254 being at maximum
     *           255:    The end-device was not able to measure the battery level
     *     @type int $margin
     *           The device margin status
     *           -32..32: The demodulation SNR ration in dB
     *     @type bool $external_power_source
     *           Device is connected to an external power source.
     *     @type bool $battery_level_unavailable
     *           Device battery status is not available.
     *     @type float $battery_level
     *           Battery level as a percentage.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\PBAs\PBAs::initOnce();
        parent::__construct($data);
    }

    /**
     * Device EUI (8 bytes).
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * Device EUI (8 bytes).
     *
     * Generated from protobuf field <code>bytes dev_eui = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, False);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Battery level (deprecated, use battery_level).
     * 0:      The end-device is connected to an external power source
     * 1..254: The battery level, 1 being at minimum and 254 being at maximum
     * 255:    The end-device was not able to measure the battery level
     *
     * Generated from protobuf field <code>uint32 battery = 2;</code>
     * @return int
     */
    public function getBattery()
    {
        return $this->battery;
    }

    /**
     * Battery level (deprecated, use battery_level).
     * 0:      The end-device is connected to an external power source
     * 1..254: The battery level, 1 being at minimum and 254 being at maximum
     * 255:    The end-device was not able to measure the battery level
     *
     * Generated from protobuf field <code>uint32 battery = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setBattery($var)
    {
        GPBUtil::checkUint32($var);
        $this->battery = $var;

        return $this;
    }

    /**
     * The device margin status
     * -32..32: The demodulation SNR ration in dB
     *
     * Generated from protobuf field <code>int32 margin = 3;</code>
     * @return int
     */
    public function getMargin()
    {
        return $this->margin;
    }

    /**
     * The device margin status
     * -32..32: The demodulation SNR ration in dB
     *
     * Generated from protobuf field <code>int32 margin = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setMargin($var)
    {
        GPBUtil::checkInt32($var);
        $this->margin = $var;

        return $this;
    }

    /**
     * Device is connected to an external power source.
     *
     * Generated from protobuf field <code>bool external_power_source = 4;</code>
     * @return bool
     */
    public function getExternalPowerSource()
    {
        return $this->external_power_source;
    }

    /**
     * Device is connected to an external power source.
     *
     * Generated from protobuf field <code>bool external_power_source = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setExternalPowerSource($var)
    {
        GPBUtil::checkBool($var);
        $this->external_power_source = $var;

        return $this;
    }

    /**
     * Device battery status is not available.
     *
     * Generated from protobuf field <code>bool battery_level_unavailable = 5;</code>
     * @return bool
     */
    public function getBatteryLevelUnavailable()
    {
        return $this->battery_level_unavailable;
    }

    /**
     * Device battery status is not available.
     *
     * Generated from protobuf field <code>bool battery_level_unavailable = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setBatteryLevelUnavailable($var)
    {
        GPBUtil::checkBool($var);
        $this->battery_level_unavailable = $var;

        return $this;
    }

    /**
     * Battery level as a percentage.
     *
     * Generated from protobuf field <code>float battery_level = 6;</code>
     * @return float
     */
    public function getBatteryLevel()
    {
        return $this->battery_level;
    }

    /**
     * Battery level as a percentage.
     *
     * Generated from protobuf field <code>float battery_level = 6;</code>
     * @param float $var
     * @return $this
     */
    public function setBatteryLevel($var)
    {
        GPBUtil::checkFloat($var);
        $this->battery_level = $var;

        return $this;
    }

}

