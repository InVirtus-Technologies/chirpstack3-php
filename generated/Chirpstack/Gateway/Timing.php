<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gw/gw.proto

namespace Chirpstack\Gateway;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gw.Timing</code>
 */
class Timing extends \Google\Protobuf\Internal\Message
{
    protected $parameters;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Chirpstack\Gateway\ImmediatelyTimingInfo $immediately
     *           Immediately timing information.
     *     @type \Chirpstack\Gateway\DelayTimingInfo $delay
     *           Context based delay timing information.
     *     @type \Chirpstack\Gateway\GPSEpochTimingInfo $gps_epoch
     *           GPS Epoch timing information.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Gateway\Gw::initOnce();
        parent::__construct($data);
    }

    /**
     * Immediately timing information.
     *
     * Generated from protobuf field <code>.gw.ImmediatelyTimingInfo immediately = 1;</code>
     * @return \Chirpstack\Gateway\ImmediatelyTimingInfo|null
     */
    public function getImmediately()
    {
        return $this->readOneof(1);
    }

    public function hasImmediately()
    {
        return $this->hasOneof(1);
    }

    /**
     * Immediately timing information.
     *
     * Generated from protobuf field <code>.gw.ImmediatelyTimingInfo immediately = 1;</code>
     * @param \Chirpstack\Gateway\ImmediatelyTimingInfo $var
     * @return $this
     */
    public function setImmediately($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\ImmediatelyTimingInfo::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Context based delay timing information.
     *
     * Generated from protobuf field <code>.gw.DelayTimingInfo delay = 2;</code>
     * @return \Chirpstack\Gateway\DelayTimingInfo|null
     */
    public function getDelay()
    {
        return $this->readOneof(2);
    }

    public function hasDelay()
    {
        return $this->hasOneof(2);
    }

    /**
     * Context based delay timing information.
     *
     * Generated from protobuf field <code>.gw.DelayTimingInfo delay = 2;</code>
     * @param \Chirpstack\Gateway\DelayTimingInfo $var
     * @return $this
     */
    public function setDelay($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\DelayTimingInfo::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * GPS Epoch timing information.
     *
     * Generated from protobuf field <code>.gw.GPSEpochTimingInfo gps_epoch = 3;</code>
     * @return \Chirpstack\Gateway\GPSEpochTimingInfo|null
     */
    public function getGpsEpoch()
    {
        return $this->readOneof(3);
    }

    public function hasGpsEpoch()
    {
        return $this->hasOneof(3);
    }

    /**
     * GPS Epoch timing information.
     *
     * Generated from protobuf field <code>.gw.GPSEpochTimingInfo gps_epoch = 3;</code>
     * @param \Chirpstack\Gateway\GPSEpochTimingInfo $var
     * @return $this
     */
    public function setGpsEpoch($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\GPSEpochTimingInfo::class);
        $this->writeOneof(3, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getParameters()
    {
        return $this->whichOneof("parameters");
    }

}

