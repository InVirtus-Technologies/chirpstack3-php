<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gw/gw.proto

namespace Chirpstack\Gateway;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gw.DownlinkTxInfoLegacy</code>
 */
class DownlinkTxInfoLegacy extends \Google\Protobuf\Internal\Message
{
    /**
     * Gateway ID.
     * Deprecated: replaced by gateway_id in DownlinkFrame.
     *
     * Generated from protobuf field <code>bytes gateway_id = 1;</code>
     */
    protected $gateway_id = '';
    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 5;</code>
     */
    protected $frequency = 0;
    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 6;</code>
     */
    protected $power = 0;
    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.common.Modulation modulation = 7;</code>
     */
    protected $modulation = 0;
    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 10;</code>
     */
    protected $board = 0;
    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 11;</code>
     */
    protected $antenna = 0;
    /**
     * Timing defines the downlink timing to use.
     *
     * Generated from protobuf field <code>.gw.DownlinkTiming timing = 12;</code>
     */
    protected $timing = 0;
    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 16;</code>
     */
    protected $context = '';
    protected $modulation_info;
    protected $timing_info;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $gateway_id
     *           Gateway ID.
     *           Deprecated: replaced by gateway_id in DownlinkFrame.
     *     @type int $frequency
     *           TX frequency (in Hz).
     *     @type int $power
     *           TX power (in dBm EIRP).
     *     @type int $modulation
     *           Modulation.
     *     @type \Chirpstack\Gateway\LoraModulationInfo $lora_modulation_info
     *           LoRa modulation information.
     *     @type \Chirpstack\Gateway\FskModulationInfo $fsk_modulation_info
     *           FSK modulation information.
     *     @type int $board
     *           The board identifier for emitting the frame.
     *     @type int $antenna
     *           The antenna identifier for emitting the frame.
     *     @type int $timing
     *           Timing defines the downlink timing to use.
     *     @type \Chirpstack\Gateway\ImmediatelyTimingInfo $immediately_timing_info
     *           Immediately timing information.
     *     @type \Chirpstack\Gateway\DelayTimingInfo $delay_timing_info
     *           Context based delay timing information.
     *     @type \Chirpstack\Gateway\GPSEpochTimingInfo $gps_epoch_timing_info
     *           GPS Epoch timing information.
     *     @type string $context
     *           Gateway specific context.
     *           In case of a Class-A downlink, this contains a copy of the uplink context.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Gateway\Gw::initOnce();
        parent::__construct($data);
    }

    /**
     * Gateway ID.
     * Deprecated: replaced by gateway_id in DownlinkFrame.
     *
     * Generated from protobuf field <code>bytes gateway_id = 1;</code>
     * @return string
     */
    public function getGatewayId()
    {
        return $this->gateway_id;
    }

    /**
     * Gateway ID.
     * Deprecated: replaced by gateway_id in DownlinkFrame.
     *
     * Generated from protobuf field <code>bytes gateway_id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setGatewayId($var)
    {
        GPBUtil::checkString($var, False);
        $this->gateway_id = $var;

        return $this;
    }

    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 5;</code>
     * @return int
     */
    public function getFrequency()
    {
        return $this->frequency;
    }

    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setFrequency($var)
    {
        GPBUtil::checkUint32($var);
        $this->frequency = $var;

        return $this;
    }

    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 6;</code>
     * @return int
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setPower($var)
    {
        GPBUtil::checkInt32($var);
        $this->power = $var;

        return $this;
    }

    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.common.Modulation modulation = 7;</code>
     * @return int
     */
    public function getModulation()
    {
        return $this->modulation;
    }

    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.common.Modulation modulation = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setModulation($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Common\Modulation::class);
        $this->modulation = $var;

        return $this;
    }

    /**
     * LoRa modulation information.
     *
     * Generated from protobuf field <code>.gw.LoraModulationInfo lora_modulation_info = 8;</code>
     * @return \Chirpstack\Gateway\LoraModulationInfo|null
     */
    public function getLoraModulationInfo()
    {
        return $this->readOneof(8);
    }

    public function hasLoraModulationInfo()
    {
        return $this->hasOneof(8);
    }

    /**
     * LoRa modulation information.
     *
     * Generated from protobuf field <code>.gw.LoraModulationInfo lora_modulation_info = 8;</code>
     * @param \Chirpstack\Gateway\LoraModulationInfo $var
     * @return $this
     */
    public function setLoraModulationInfo($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\LoraModulationInfo::class);
        $this->writeOneof(8, $var);

        return $this;
    }

    /**
     * FSK modulation information.
     *
     * Generated from protobuf field <code>.gw.FskModulationInfo fsk_modulation_info = 9;</code>
     * @return \Chirpstack\Gateway\FskModulationInfo|null
     */
    public function getFskModulationInfo()
    {
        return $this->readOneof(9);
    }

    public function hasFskModulationInfo()
    {
        return $this->hasOneof(9);
    }

    /**
     * FSK modulation information.
     *
     * Generated from protobuf field <code>.gw.FskModulationInfo fsk_modulation_info = 9;</code>
     * @param \Chirpstack\Gateway\FskModulationInfo $var
     * @return $this
     */
    public function setFskModulationInfo($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\FskModulationInfo::class);
        $this->writeOneof(9, $var);

        return $this;
    }

    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 10;</code>
     * @return int
     */
    public function getBoard()
    {
        return $this->board;
    }

    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setBoard($var)
    {
        GPBUtil::checkUint32($var);
        $this->board = $var;

        return $this;
    }

    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 11;</code>
     * @return int
     */
    public function getAntenna()
    {
        return $this->antenna;
    }

    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 11;</code>
     * @param int $var
     * @return $this
     */
    public function setAntenna($var)
    {
        GPBUtil::checkUint32($var);
        $this->antenna = $var;

        return $this;
    }

    /**
     * Timing defines the downlink timing to use.
     *
     * Generated from protobuf field <code>.gw.DownlinkTiming timing = 12;</code>
     * @return int
     */
    public function getTiming()
    {
        return $this->timing;
    }

    /**
     * Timing defines the downlink timing to use.
     *
     * Generated from protobuf field <code>.gw.DownlinkTiming timing = 12;</code>
     * @param int $var
     * @return $this
     */
    public function setTiming($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Gateway\DownlinkTiming::class);
        $this->timing = $var;

        return $this;
    }

    /**
     * Immediately timing information.
     *
     * Generated from protobuf field <code>.gw.ImmediatelyTimingInfo immediately_timing_info = 13;</code>
     * @return \Chirpstack\Gateway\ImmediatelyTimingInfo|null
     */
    public function getImmediatelyTimingInfo()
    {
        return $this->readOneof(13);
    }

    public function hasImmediatelyTimingInfo()
    {
        return $this->hasOneof(13);
    }

    /**
     * Immediately timing information.
     *
     * Generated from protobuf field <code>.gw.ImmediatelyTimingInfo immediately_timing_info = 13;</code>
     * @param \Chirpstack\Gateway\ImmediatelyTimingInfo $var
     * @return $this
     */
    public function setImmediatelyTimingInfo($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\ImmediatelyTimingInfo::class);
        $this->writeOneof(13, $var);

        return $this;
    }

    /**
     * Context based delay timing information.
     *
     * Generated from protobuf field <code>.gw.DelayTimingInfo delay_timing_info = 14;</code>
     * @return \Chirpstack\Gateway\DelayTimingInfo|null
     */
    public function getDelayTimingInfo()
    {
        return $this->readOneof(14);
    }

    public function hasDelayTimingInfo()
    {
        return $this->hasOneof(14);
    }

    /**
     * Context based delay timing information.
     *
     * Generated from protobuf field <code>.gw.DelayTimingInfo delay_timing_info = 14;</code>
     * @param \Chirpstack\Gateway\DelayTimingInfo $var
     * @return $this
     */
    public function setDelayTimingInfo($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\DelayTimingInfo::class);
        $this->writeOneof(14, $var);

        return $this;
    }

    /**
     * GPS Epoch timing information.
     *
     * Generated from protobuf field <code>.gw.GPSEpochTimingInfo gps_epoch_timing_info = 15;</code>
     * @return \Chirpstack\Gateway\GPSEpochTimingInfo|null
     */
    public function getGpsEpochTimingInfo()
    {
        return $this->readOneof(15);
    }

    public function hasGpsEpochTimingInfo()
    {
        return $this->hasOneof(15);
    }

    /**
     * GPS Epoch timing information.
     *
     * Generated from protobuf field <code>.gw.GPSEpochTimingInfo gps_epoch_timing_info = 15;</code>
     * @param \Chirpstack\Gateway\GPSEpochTimingInfo $var
     * @return $this
     */
    public function setGpsEpochTimingInfo($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\GPSEpochTimingInfo::class);
        $this->writeOneof(15, $var);

        return $this;
    }

    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 16;</code>
     * @return string
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 16;</code>
     * @param string $var
     * @return $this
     */
    public function setContext($var)
    {
        GPBUtil::checkString($var, False);
        $this->context = $var;

        return $this;
    }

    /**
     * @return string
     */
    public function getModulationInfo()
    {
        return $this->whichOneof("modulation_info");
    }

    /**
     * @return string
     */
    public function getTimingInfo()
    {
        return $this->whichOneof("timing_info");
    }

}

