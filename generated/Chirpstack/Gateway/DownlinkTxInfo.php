<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: gw/gw.proto

namespace Chirpstack\Gateway;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>gw.DownlinkTxInfo</code>
 */
class DownlinkTxInfo extends \Google\Protobuf\Internal\Message
{
    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 1;</code>
     */
    protected $frequency = 0;
    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 2;</code>
     */
    protected $power = 0;
    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.gw.Modulation modulation = 3;</code>
     */
    protected $modulation = null;
    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 4;</code>
     */
    protected $board = 0;
    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 5;</code>
     */
    protected $antenna = 0;
    /**
     * Timing.
     *
     * Generated from protobuf field <code>.gw.Timing timing = 6;</code>
     */
    protected $timing = null;
    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 7;</code>
     */
    protected $context = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $frequency
     *           TX frequency (in Hz).
     *     @type int $power
     *           TX power (in dBm EIRP).
     *     @type \Chirpstack\Gateway\Modulation $modulation
     *           Modulation.
     *     @type int $board
     *           The board identifier for emitting the frame.
     *     @type int $antenna
     *           The antenna identifier for emitting the frame.
     *     @type \Chirpstack\Gateway\Timing $timing
     *           Timing.
     *     @type string $context
     *           Gateway specific context.
     *           In case of a Class-A downlink, this contains a copy of the uplink context.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Gateway\Gw::initOnce();
        parent::__construct($data);
    }

    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 1;</code>
     * @return int
     */
    public function getFrequency()
    {
        return $this->frequency;
    }

    /**
     * TX frequency (in Hz).
     *
     * Generated from protobuf field <code>uint32 frequency = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setFrequency($var)
    {
        GPBUtil::checkUint32($var);
        $this->frequency = $var;

        return $this;
    }

    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 2;</code>
     * @return int
     */
    public function getPower()
    {
        return $this->power;
    }

    /**
     * TX power (in dBm EIRP).
     *
     * Generated from protobuf field <code>int32 power = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setPower($var)
    {
        GPBUtil::checkInt32($var);
        $this->power = $var;

        return $this;
    }

    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.gw.Modulation modulation = 3;</code>
     * @return \Chirpstack\Gateway\Modulation|null
     */
    public function getModulation()
    {
        return $this->modulation;
    }

    public function hasModulation()
    {
        return isset($this->modulation);
    }

    public function clearModulation()
    {
        unset($this->modulation);
    }

    /**
     * Modulation.
     *
     * Generated from protobuf field <code>.gw.Modulation modulation = 3;</code>
     * @param \Chirpstack\Gateway\Modulation $var
     * @return $this
     */
    public function setModulation($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\Modulation::class);
        $this->modulation = $var;

        return $this;
    }

    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 4;</code>
     * @return int
     */
    public function getBoard()
    {
        return $this->board;
    }

    /**
     * The board identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 board = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setBoard($var)
    {
        GPBUtil::checkUint32($var);
        $this->board = $var;

        return $this;
    }

    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 5;</code>
     * @return int
     */
    public function getAntenna()
    {
        return $this->antenna;
    }

    /**
     * The antenna identifier for emitting the frame.
     *
     * Generated from protobuf field <code>uint32 antenna = 5;</code>
     * @param int $var
     * @return $this
     */
    public function setAntenna($var)
    {
        GPBUtil::checkUint32($var);
        $this->antenna = $var;

        return $this;
    }

    /**
     * Timing.
     *
     * Generated from protobuf field <code>.gw.Timing timing = 6;</code>
     * @return \Chirpstack\Gateway\Timing|null
     */
    public function getTiming()
    {
        return $this->timing;
    }

    public function hasTiming()
    {
        return isset($this->timing);
    }

    public function clearTiming()
    {
        unset($this->timing);
    }

    /**
     * Timing.
     *
     * Generated from protobuf field <code>.gw.Timing timing = 6;</code>
     * @param \Chirpstack\Gateway\Timing $var
     * @return $this
     */
    public function setTiming($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Gateway\Timing::class);
        $this->timing = $var;

        return $this;
    }

    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 7;</code>
     * @return string
     */
    public function getContext()
    {
        return $this->context;
    }

    /**
     * Gateway specific context.
     * In case of a Class-A downlink, this contains a copy of the uplink context.
     *
     * Generated from protobuf field <code>bytes context = 7;</code>
     * @param string $var
     * @return $this
     */
    public function setContext($var)
    {
        GPBUtil::checkString($var, False);
        $this->context = $var;

        return $this;
    }

}

