<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/device.proto

namespace Chirpstack\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.Device</code>
 */
class Device extends \Google\Protobuf\Internal\Message
{
    /**
     * DevEUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 1;</code>
     */
    protected $dev_eui = '';
    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     */
    protected $name = '';
    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     */
    protected $description = '';
    /**
     * Application ID (UUID).
     *
     * Generated from protobuf field <code>string application_id = 4;</code>
     */
    protected $application_id = '';
    /**
     * Device-profile ID (UUID).
     *
     * Generated from protobuf field <code>string device_profile_id = 5;</code>
     */
    protected $device_profile_id = '';
    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for
     * debugging).
     *
     * Generated from protobuf field <code>bool skip_fcnt_check = 6;</code>
     */
    protected $skip_fcnt_check = false;
    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 7;</code>
     */
    protected $is_disabled = false;
    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     */
    private $variables;
    /**
     * Tags (user defined).
     * These tags can be used to add additional information to the device.
     * These tags are exposed in all the integration events.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     */
    private $tags;
    /**
     * JoinEUI (optional, EUI64).
     * This field will be automatically set / updated on OTAA. However, in some
     * cases it must be pre-configured. For example to allow OTAA using a Relay.
     * In this case the Relay needs to know the JoinEUI + DevEUI combinations
     * of the devices for which it needs to forward uplinks.
     *
     * Generated from protobuf field <code>string join_eui = 10;</code>
     */
    protected $join_eui = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dev_eui
     *           DevEUI (EUI64).
     *     @type string $name
     *           Name.
     *     @type string $description
     *           Description.
     *     @type string $application_id
     *           Application ID (UUID).
     *     @type string $device_profile_id
     *           Device-profile ID (UUID).
     *     @type bool $skip_fcnt_check
     *           Skip frame-counter checks (this is insecure, but could be helpful for
     *           debugging).
     *     @type bool $is_disabled
     *           Device is disabled.
     *     @type array|\Google\Protobuf\Internal\MapField $variables
     *           Variables (user defined).
     *           These variables can be used together with integrations to store tokens /
     *           secrets that must be configured per device. These variables are not
     *           exposed in the event payloads.
     *     @type array|\Google\Protobuf\Internal\MapField $tags
     *           Tags (user defined).
     *           These tags can be used to add additional information to the device.
     *           These tags are exposed in all the integration events.
     *     @type string $join_eui
     *           JoinEUI (optional, EUI64).
     *           This field will be automatically set / updated on OTAA. However, in some
     *           cases it must be pre-configured. For example to allow OTAA using a Relay.
     *           In this case the Relay needs to know the JoinEUI + DevEUI combinations
     *           of the devices for which it needs to forward uplinks.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Api\Device::initOnce();
        parent::__construct($data);
    }

    /**
     * DevEUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 1;</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * DevEUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, True);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Application ID (UUID).
     *
     * Generated from protobuf field <code>string application_id = 4;</code>
     * @return string
     */
    public function getApplicationId()
    {
        return $this->application_id;
    }

    /**
     * Application ID (UUID).
     *
     * Generated from protobuf field <code>string application_id = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setApplicationId($var)
    {
        GPBUtil::checkString($var, True);
        $this->application_id = $var;

        return $this;
    }

    /**
     * Device-profile ID (UUID).
     *
     * Generated from protobuf field <code>string device_profile_id = 5;</code>
     * @return string
     */
    public function getDeviceProfileId()
    {
        return $this->device_profile_id;
    }

    /**
     * Device-profile ID (UUID).
     *
     * Generated from protobuf field <code>string device_profile_id = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceProfileId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_profile_id = $var;

        return $this;
    }

    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for
     * debugging).
     *
     * Generated from protobuf field <code>bool skip_fcnt_check = 6;</code>
     * @return bool
     */
    public function getSkipFcntCheck()
    {
        return $this->skip_fcnt_check;
    }

    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for
     * debugging).
     *
     * Generated from protobuf field <code>bool skip_fcnt_check = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setSkipFcntCheck($var)
    {
        GPBUtil::checkBool($var);
        $this->skip_fcnt_check = $var;

        return $this;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 7;</code>
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->is_disabled;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDisabled($var)
    {
        GPBUtil::checkBool($var);
        $this->is_disabled = $var;

        return $this;
    }

    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getVariables()
    {
        return $this->variables;
    }

    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setVariables($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->variables = $arr;

        return $this;
    }

    /**
     * Tags (user defined).
     * These tags can be used to add additional information to the device.
     * These tags are exposed in all the integration events.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * Tags (user defined).
     * These tags can be used to add additional information to the device.
     * These tags are exposed in all the integration events.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setTags($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tags = $arr;

        return $this;
    }

    /**
     * JoinEUI (optional, EUI64).
     * This field will be automatically set / updated on OTAA. However, in some
     * cases it must be pre-configured. For example to allow OTAA using a Relay.
     * In this case the Relay needs to know the JoinEUI + DevEUI combinations
     * of the devices for which it needs to forward uplinks.
     *
     * Generated from protobuf field <code>string join_eui = 10;</code>
     * @return string
     */
    public function getJoinEui()
    {
        return $this->join_eui;
    }

    /**
     * JoinEUI (optional, EUI64).
     * This field will be automatically set / updated on OTAA. However, in some
     * cases it must be pre-configured. For example to allow OTAA using a Relay.
     * In this case the Relay needs to know the JoinEUI + DevEUI combinations
     * of the devices for which it needs to forward uplinks.
     *
     * Generated from protobuf field <code>string join_eui = 10;</code>
     * @param string $var
     * @return $this
     */
    public function setJoinEui($var)
    {
        GPBUtil::checkString($var, True);
        $this->join_eui = $var;

        return $this;
    }

}

