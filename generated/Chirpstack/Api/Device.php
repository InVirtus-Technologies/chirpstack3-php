<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: as/external/api/device.proto

namespace Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.Device</code>
 */
class Device extends \Google\Protobuf\Internal\Message
{
    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     */
    protected $dev_eui = '';
    /**
     * Name of the device (if left blank, it will be set to the DevEUI).
     *
     * Generated from protobuf field <code>string name = 2;</code>
     */
    protected $name = '';
    /**
     * ID of the application to which the device must be added.
     * It is possible to move a device to a different application on update,
     * given that both the old and the new application share the same
     * service-profile.
     *
     * Generated from protobuf field <code>int64 application_id = 3 [json_name = "applicationID"];</code>
     */
    protected $application_id = 0;
    /**
     * Description of the device.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     */
    protected $description = '';
    /**
     * DeviceProfileID attached to the device.
     *
     * Generated from protobuf field <code>string device_profile_id = 5 [json_name = "deviceProfileID"];</code>
     */
    protected $device_profile_id = '';
    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for debugging).
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 6;</code>
     */
    protected $skip_f_cnt_check = false;
    /**
     * Reference altitude.
     * When using geolocation, this altitude will be used as a reference
     * (when supported by the geolocation-server) to increase geolocation
     * accuracy.
     *
     * Generated from protobuf field <code>double reference_altitude = 7;</code>
     */
    protected $reference_altitude = 0.0;
    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     */
    private $variables;
    /**
     * Tags (user defined).
     * These tags are exposed in the event payloads or to integration. Tags are
     * intended for aggregation and filtering.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     */
    private $tags;
    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 10;</code>
     */
    protected $is_disabled = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dev_eui
     *           Device EUI (HEX encoded).
     *     @type string $name
     *           Name of the device (if left blank, it will be set to the DevEUI).
     *     @type int|string $application_id
     *           ID of the application to which the device must be added.
     *           It is possible to move a device to a different application on update,
     *           given that both the old and the new application share the same
     *           service-profile.
     *     @type string $description
     *           Description of the device.
     *     @type string $device_profile_id
     *           DeviceProfileID attached to the device.
     *     @type bool $skip_f_cnt_check
     *           Skip frame-counter checks (this is insecure, but could be helpful for debugging).
     *     @type float $reference_altitude
     *           Reference altitude.
     *           When using geolocation, this altitude will be used as a reference
     *           (when supported by the geolocation-server) to increase geolocation
     *           accuracy.
     *     @type array|\Google\Protobuf\Internal\MapField $variables
     *           Variables (user defined).
     *           These variables can be used together with integrations to store tokens /
     *           secrets that must be configured per device. These variables are not
     *           exposed in the event payloads.
     *     @type array|\Google\Protobuf\Internal\MapField $tags
     *           Tags (user defined).
     *           These tags are exposed in the event payloads or to integration. Tags are
     *           intended for aggregation and filtering.
     *     @type bool $is_disabled
     *           Device is disabled.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\PBAs\External\Api\Device::initOnce();
        parent::__construct($data);
    }

    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * Device EUI (HEX encoded).
     *
     * Generated from protobuf field <code>string dev_eui = 1 [json_name = "devEUI"];</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, True);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Name of the device (if left blank, it will be set to the DevEUI).
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Name of the device (if left blank, it will be set to the DevEUI).
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * ID of the application to which the device must be added.
     * It is possible to move a device to a different application on update,
     * given that both the old and the new application share the same
     * service-profile.
     *
     * Generated from protobuf field <code>int64 application_id = 3 [json_name = "applicationID"];</code>
     * @return int|string
     */
    public function getApplicationId()
    {
        return $this->application_id;
    }

    /**
     * ID of the application to which the device must be added.
     * It is possible to move a device to a different application on update,
     * given that both the old and the new application share the same
     * service-profile.
     *
     * Generated from protobuf field <code>int64 application_id = 3 [json_name = "applicationID"];</code>
     * @param int|string $var
     * @return $this
     */
    public function setApplicationId($var)
    {
        GPBUtil::checkInt64($var);
        $this->application_id = $var;

        return $this;
    }

    /**
     * Description of the device.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Description of the device.
     *
     * Generated from protobuf field <code>string description = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * DeviceProfileID attached to the device.
     *
     * Generated from protobuf field <code>string device_profile_id = 5 [json_name = "deviceProfileID"];</code>
     * @return string
     */
    public function getDeviceProfileId()
    {
        return $this->device_profile_id;
    }

    /**
     * DeviceProfileID attached to the device.
     *
     * Generated from protobuf field <code>string device_profile_id = 5 [json_name = "deviceProfileID"];</code>
     * @param string $var
     * @return $this
     */
    public function setDeviceProfileId($var)
    {
        GPBUtil::checkString($var, True);
        $this->device_profile_id = $var;

        return $this;
    }

    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for debugging).
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 6;</code>
     * @return bool
     */
    public function getSkipFCntCheck()
    {
        return $this->skip_f_cnt_check;
    }

    /**
     * Skip frame-counter checks (this is insecure, but could be helpful for debugging).
     *
     * Generated from protobuf field <code>bool skip_f_cnt_check = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setSkipFCntCheck($var)
    {
        GPBUtil::checkBool($var);
        $this->skip_f_cnt_check = $var;

        return $this;
    }

    /**
     * Reference altitude.
     * When using geolocation, this altitude will be used as a reference
     * (when supported by the geolocation-server) to increase geolocation
     * accuracy.
     *
     * Generated from protobuf field <code>double reference_altitude = 7;</code>
     * @return float
     */
    public function getReferenceAltitude()
    {
        return $this->reference_altitude;
    }

    /**
     * Reference altitude.
     * When using geolocation, this altitude will be used as a reference
     * (when supported by the geolocation-server) to increase geolocation
     * accuracy.
     *
     * Generated from protobuf field <code>double reference_altitude = 7;</code>
     * @param float $var
     * @return $this
     */
    public function setReferenceAltitude($var)
    {
        GPBUtil::checkDouble($var);
        $this->reference_altitude = $var;

        return $this;
    }

    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getVariables()
    {
        return $this->variables;
    }

    /**
     * Variables (user defined).
     * These variables can be used together with integrations to store tokens /
     * secrets that must be configured per device. These variables are not
     * exposed in the event payloads.
     *
     * Generated from protobuf field <code>map<string, string> variables = 8;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setVariables($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->variables = $arr;

        return $this;
    }

    /**
     * Tags (user defined).
     * These tags are exposed in the event payloads or to integration. Tags are
     * intended for aggregation and filtering.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * Tags (user defined).
     * These tags are exposed in the event payloads or to integration. Tags are
     * intended for aggregation and filtering.
     *
     * Generated from protobuf field <code>map<string, string> tags = 9;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setTags($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tags = $arr;

        return $this;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 10;</code>
     * @return bool
     */
    public function getIsDisabled()
    {
        return $this->is_disabled;
    }

    /**
     * Device is disabled.
     *
     * Generated from protobuf field <code>bool is_disabled = 10;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsDisabled($var)
    {
        GPBUtil::checkBool($var);
        $this->is_disabled = $var;

        return $this;
    }

}

