<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/device.proto

namespace Chirpstack\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.DeviceQueueItem</code>
 */
class DeviceQueueItem extends \Google\Protobuf\Internal\Message
{
    /**
     * ID (UUID).
     * This is automatically generated on enqueue.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * Device EUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 2;</code>
     */
    protected $dev_eui = '';
    /**
     * Confirmed.
     *
     * Generated from protobuf field <code>bool confirmed = 3;</code>
     */
    protected $confirmed = false;
    /**
     * FPort (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     */
    protected $f_port = 0;
    /**
     * Data.
     * Or use the json_object field when a codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 5;</code>
     */
    protected $data = '';
    /**
     * Only use this when a codec has been configured that can encode this
     * object to bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct object = 6;</code>
     */
    protected $object = null;
    /**
     * Is pending.
     * This is set by ChirpStack to true when the downlink is pending (e.g. it
     * has been sent, but a confirmation is still pending).
     *
     * Generated from protobuf field <code>bool is_pending = 7;</code>
     */
    protected $is_pending = false;
    /**
     * Downlink frame-counter.
     * Do not set this for plain-text data payloads. It will be automatically set
     * by ChirpStack when the payload has been sent as downlink.
     *
     * Generated from protobuf field <code>uint32 f_cnt_down = 8;</code>
     */
    protected $f_cnt_down = 0;
    /**
     * Is encrypted.
     * This must be set to true if the end-application has already encrypted
     * the data payload. In this case, the f_cnt_down field must be set to
     * the corresponding frame-counter which has been used during the encryption.
     *
     * Generated from protobuf field <code>bool is_encrypted = 9;</code>
     */
    protected $is_encrypted = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           ID (UUID).
     *           This is automatically generated on enqueue.
     *     @type string $dev_eui
     *           Device EUI (EUI64).
     *     @type bool $confirmed
     *           Confirmed.
     *     @type int $f_port
     *           FPort (must be > 0).
     *     @type string $data
     *           Data.
     *           Or use the json_object field when a codec has been configured.
     *     @type \Google\Protobuf\Struct $object
     *           Only use this when a codec has been configured that can encode this
     *           object to bytes.
     *     @type bool $is_pending
     *           Is pending.
     *           This is set by ChirpStack to true when the downlink is pending (e.g. it
     *           has been sent, but a confirmation is still pending).
     *     @type int $f_cnt_down
     *           Downlink frame-counter.
     *           Do not set this for plain-text data payloads. It will be automatically set
     *           by ChirpStack when the payload has been sent as downlink.
     *     @type bool $is_encrypted
     *           Is encrypted.
     *           This must be set to true if the end-application has already encrypted
     *           the data payload. In this case, the f_cnt_down field must be set to
     *           the corresponding frame-counter which has been used during the encryption.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Api\Device::initOnce();
        parent::__construct($data);
    }

    /**
     * ID (UUID).
     * This is automatically generated on enqueue.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * ID (UUID).
     * This is automatically generated on enqueue.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Device EUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 2;</code>
     * @return string
     */
    public function getDevEui()
    {
        return $this->dev_eui;
    }

    /**
     * Device EUI (EUI64).
     *
     * Generated from protobuf field <code>string dev_eui = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setDevEui($var)
    {
        GPBUtil::checkString($var, True);
        $this->dev_eui = $var;

        return $this;
    }

    /**
     * Confirmed.
     *
     * Generated from protobuf field <code>bool confirmed = 3;</code>
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->confirmed;
    }

    /**
     * Confirmed.
     *
     * Generated from protobuf field <code>bool confirmed = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setConfirmed($var)
    {
        GPBUtil::checkBool($var);
        $this->confirmed = $var;

        return $this;
    }

    /**
     * FPort (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     * @return int
     */
    public function getFPort()
    {
        return $this->f_port;
    }

    /**
     * FPort (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setFPort($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_port = $var;

        return $this;
    }

    /**
     * Data.
     * Or use the json_object field when a codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 5;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Data.
     * Or use the json_object field when a codec has been configured.
     *
     * Generated from protobuf field <code>bytes data = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

    /**
     * Only use this when a codec has been configured that can encode this
     * object to bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct object = 6;</code>
     * @return \Google\Protobuf\Struct|null
     */
    public function getObject()
    {
        return $this->object;
    }

    public function hasObject()
    {
        return isset($this->object);
    }

    public function clearObject()
    {
        unset($this->object);
    }

    /**
     * Only use this when a codec has been configured that can encode this
     * object to bytes.
     *
     * Generated from protobuf field <code>.google.protobuf.Struct object = 6;</code>
     * @param \Google\Protobuf\Struct $var
     * @return $this
     */
    public function setObject($var)
    {
        GPBUtil::checkMessage($var, \Google\Protobuf\Struct::class);
        $this->object = $var;

        return $this;
    }

    /**
     * Is pending.
     * This is set by ChirpStack to true when the downlink is pending (e.g. it
     * has been sent, but a confirmation is still pending).
     *
     * Generated from protobuf field <code>bool is_pending = 7;</code>
     * @return bool
     */
    public function getIsPending()
    {
        return $this->is_pending;
    }

    /**
     * Is pending.
     * This is set by ChirpStack to true when the downlink is pending (e.g. it
     * has been sent, but a confirmation is still pending).
     *
     * Generated from protobuf field <code>bool is_pending = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsPending($var)
    {
        GPBUtil::checkBool($var);
        $this->is_pending = $var;

        return $this;
    }

    /**
     * Downlink frame-counter.
     * Do not set this for plain-text data payloads. It will be automatically set
     * by ChirpStack when the payload has been sent as downlink.
     *
     * Generated from protobuf field <code>uint32 f_cnt_down = 8;</code>
     * @return int
     */
    public function getFCntDown()
    {
        return $this->f_cnt_down;
    }

    /**
     * Downlink frame-counter.
     * Do not set this for plain-text data payloads. It will be automatically set
     * by ChirpStack when the payload has been sent as downlink.
     *
     * Generated from protobuf field <code>uint32 f_cnt_down = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setFCntDown($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt_down = $var;

        return $this;
    }

    /**
     * Is encrypted.
     * This must be set to true if the end-application has already encrypted
     * the data payload. In this case, the f_cnt_down field must be set to
     * the corresponding frame-counter which has been used during the encryption.
     *
     * Generated from protobuf field <code>bool is_encrypted = 9;</code>
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->is_encrypted;
    }

    /**
     * Is encrypted.
     * This must be set to true if the end-application has already encrypted
     * the data payload. In this case, the f_cnt_down field must be set to
     * the corresponding frame-counter which has been used during the encryption.
     *
     * Generated from protobuf field <code>bool is_encrypted = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setIsEncrypted($var)
    {
        GPBUtil::checkBool($var);
        $this->is_encrypted = $var;

        return $this;
    }

}

