<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/device.proto

namespace Chirpstack\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.GetDeviceLinkMetricsResponse</code>
 */
class GetDeviceLinkMetricsResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Packets received from the device.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     */
    protected $rx_packets = null;
    /**
     * RSSI (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_rssi = 2;</code>
     */
    protected $gw_rssi = null;
    /**
     * SNR (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_snr = 3;</code>
     */
    protected $gw_snr = null;
    /**
     * Packets received by frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     */
    protected $rx_packets_per_freq = null;
    /**
     * Packets received by DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 5;</code>
     */
    protected $rx_packets_per_dr = null;
    /**
     * Errors.
     *
     * Generated from protobuf field <code>.common.Metric errors = 6;</code>
     */
    protected $errors = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Chirpstack\Common\Metric $rx_packets
     *           Packets received from the device.
     *     @type \Chirpstack\Common\Metric $gw_rssi
     *           RSSI (as reported by the gateway(s)).
     *     @type \Chirpstack\Common\Metric $gw_snr
     *           SNR (as reported by the gateway(s)).
     *     @type \Chirpstack\Common\Metric $rx_packets_per_freq
     *           Packets received by frequency.
     *     @type \Chirpstack\Common\Metric $rx_packets_per_dr
     *           Packets received by DR.
     *     @type \Chirpstack\Common\Metric $errors
     *           Errors.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Api\Device::initOnce();
        parent::__construct($data);
    }

    /**
     * Packets received from the device.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPackets()
    {
        return $this->rx_packets;
    }

    public function hasRxPackets()
    {
        return isset($this->rx_packets);
    }

    public function clearRxPackets()
    {
        unset($this->rx_packets);
    }

    /**
     * Packets received from the device.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPackets($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets = $var;

        return $this;
    }

    /**
     * RSSI (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_rssi = 2;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getGwRssi()
    {
        return $this->gw_rssi;
    }

    public function hasGwRssi()
    {
        return isset($this->gw_rssi);
    }

    public function clearGwRssi()
    {
        unset($this->gw_rssi);
    }

    /**
     * RSSI (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_rssi = 2;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setGwRssi($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->gw_rssi = $var;

        return $this;
    }

    /**
     * SNR (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_snr = 3;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getGwSnr()
    {
        return $this->gw_snr;
    }

    public function hasGwSnr()
    {
        return isset($this->gw_snr);
    }

    public function clearGwSnr()
    {
        unset($this->gw_snr);
    }

    /**
     * SNR (as reported by the gateway(s)).
     *
     * Generated from protobuf field <code>.common.Metric gw_snr = 3;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setGwSnr($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->gw_snr = $var;

        return $this;
    }

    /**
     * Packets received by frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPacketsPerFreq()
    {
        return $this->rx_packets_per_freq;
    }

    public function hasRxPacketsPerFreq()
    {
        return isset($this->rx_packets_per_freq);
    }

    public function clearRxPacketsPerFreq()
    {
        unset($this->rx_packets_per_freq);
    }

    /**
     * Packets received by frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPacketsPerFreq($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets_per_freq = $var;

        return $this;
    }

    /**
     * Packets received by DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 5;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPacketsPerDr()
    {
        return $this->rx_packets_per_dr;
    }

    public function hasRxPacketsPerDr()
    {
        return isset($this->rx_packets_per_dr);
    }

    public function clearRxPacketsPerDr()
    {
        unset($this->rx_packets_per_dr);
    }

    /**
     * Packets received by DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 5;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPacketsPerDr($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets_per_dr = $var;

        return $this;
    }

    /**
     * Errors.
     *
     * Generated from protobuf field <code>.common.Metric errors = 6;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getErrors()
    {
        return $this->errors;
    }

    public function hasErrors()
    {
        return isset($this->errors);
    }

    public function clearErrors()
    {
        unset($this->errors);
    }

    /**
     * Errors.
     *
     * Generated from protobuf field <code>.common.Metric errors = 6;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setErrors($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->errors = $var;

        return $this;
    }

}

