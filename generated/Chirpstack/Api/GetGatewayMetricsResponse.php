<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/gateway.proto

namespace Chirpstack\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.GetGatewayMetricsResponse</code>
 */
class GetGatewayMetricsResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * RX packets.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     */
    protected $rx_packets = null;
    /**
     * TX packets.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets = 2;</code>
     */
    protected $tx_packets = null;
    /**
     * TX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_freq = 3;</code>
     */
    protected $tx_packets_per_freq = null;
    /**
     * RX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     */
    protected $rx_packets_per_freq = null;
    /**
     * TX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_dr = 5;</code>
     */
    protected $tx_packets_per_dr = null;
    /**
     * RX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 6;</code>
     */
    protected $rx_packets_per_dr = null;
    /**
     * TX packets per status.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_status = 7;</code>
     */
    protected $tx_packets_per_status = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Chirpstack\Common\Metric $rx_packets
     *           RX packets.
     *     @type \Chirpstack\Common\Metric $tx_packets
     *           TX packets.
     *     @type \Chirpstack\Common\Metric $tx_packets_per_freq
     *           TX packets / frequency.
     *     @type \Chirpstack\Common\Metric $rx_packets_per_freq
     *           RX packets / frequency.
     *     @type \Chirpstack\Common\Metric $tx_packets_per_dr
     *           TX packets / DR.
     *     @type \Chirpstack\Common\Metric $rx_packets_per_dr
     *           RX packets / DR.
     *     @type \Chirpstack\Common\Metric $tx_packets_per_status
     *           TX packets per status.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Api\Gateway::initOnce();
        parent::__construct($data);
    }

    /**
     * RX packets.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPackets()
    {
        return $this->rx_packets;
    }

    public function hasRxPackets()
    {
        return isset($this->rx_packets);
    }

    public function clearRxPackets()
    {
        unset($this->rx_packets);
    }

    /**
     * RX packets.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets = 1;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPackets($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets = $var;

        return $this;
    }

    /**
     * TX packets.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets = 2;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getTxPackets()
    {
        return $this->tx_packets;
    }

    public function hasTxPackets()
    {
        return isset($this->tx_packets);
    }

    public function clearTxPackets()
    {
        unset($this->tx_packets);
    }

    /**
     * TX packets.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets = 2;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setTxPackets($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->tx_packets = $var;

        return $this;
    }

    /**
     * TX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_freq = 3;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getTxPacketsPerFreq()
    {
        return $this->tx_packets_per_freq;
    }

    public function hasTxPacketsPerFreq()
    {
        return isset($this->tx_packets_per_freq);
    }

    public function clearTxPacketsPerFreq()
    {
        unset($this->tx_packets_per_freq);
    }

    /**
     * TX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_freq = 3;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setTxPacketsPerFreq($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->tx_packets_per_freq = $var;

        return $this;
    }

    /**
     * RX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPacketsPerFreq()
    {
        return $this->rx_packets_per_freq;
    }

    public function hasRxPacketsPerFreq()
    {
        return isset($this->rx_packets_per_freq);
    }

    public function clearRxPacketsPerFreq()
    {
        unset($this->rx_packets_per_freq);
    }

    /**
     * RX packets / frequency.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_freq = 4;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPacketsPerFreq($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets_per_freq = $var;

        return $this;
    }

    /**
     * TX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_dr = 5;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getTxPacketsPerDr()
    {
        return $this->tx_packets_per_dr;
    }

    public function hasTxPacketsPerDr()
    {
        return isset($this->tx_packets_per_dr);
    }

    public function clearTxPacketsPerDr()
    {
        unset($this->tx_packets_per_dr);
    }

    /**
     * TX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_dr = 5;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setTxPacketsPerDr($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->tx_packets_per_dr = $var;

        return $this;
    }

    /**
     * RX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 6;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getRxPacketsPerDr()
    {
        return $this->rx_packets_per_dr;
    }

    public function hasRxPacketsPerDr()
    {
        return isset($this->rx_packets_per_dr);
    }

    public function clearRxPacketsPerDr()
    {
        unset($this->rx_packets_per_dr);
    }

    /**
     * RX packets / DR.
     *
     * Generated from protobuf field <code>.common.Metric rx_packets_per_dr = 6;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setRxPacketsPerDr($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->rx_packets_per_dr = $var;

        return $this;
    }

    /**
     * TX packets per status.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_status = 7;</code>
     * @return \Chirpstack\Common\Metric|null
     */
    public function getTxPacketsPerStatus()
    {
        return $this->tx_packets_per_status;
    }

    public function hasTxPacketsPerStatus()
    {
        return isset($this->tx_packets_per_status);
    }

    public function clearTxPacketsPerStatus()
    {
        unset($this->tx_packets_per_status);
    }

    /**
     * TX packets per status.
     *
     * Generated from protobuf field <code>.common.Metric tx_packets_per_status = 7;</code>
     * @param \Chirpstack\Common\Metric $var
     * @return $this
     */
    public function setTxPacketsPerStatus($var)
    {
        GPBUtil::checkMessage($var, \Chirpstack\Common\Metric::class);
        $this->tx_packets_per_status = $var;

        return $this;
    }

}

