<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: as/external/api/multicastGroup.proto

namespace Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.MulticastQueueItem</code>
 */
class MulticastQueueItem extends \Google\Protobuf\Internal\Message
{
    /**
     * Multicast-group ID (string formatted UUID).
     *
     * Generated from protobuf field <code>string multicast_group_id = 1 [json_name = "multicastGroupID"];</code>
     */
    protected $multicast_group_id = '';
    /**
     * Downlink frame-counter.
     * This will be automatically set on enqueue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 2;</code>
     */
    protected $f_cnt = 0;
    /**
     * FPort used (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     */
    protected $f_port = 0;
    /**
     * Base64 encoded data.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     */
    protected $data = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $multicast_group_id
     *           Multicast-group ID (string formatted UUID).
     *     @type int $f_cnt
     *           Downlink frame-counter.
     *           This will be automatically set on enqueue.
     *     @type int $f_port
     *           FPort used (must be > 0).
     *     @type string $data
     *           Base64 encoded data.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\PBAs\External\Api\MulticastGroup::initOnce();
        parent::__construct($data);
    }

    /**
     * Multicast-group ID (string formatted UUID).
     *
     * Generated from protobuf field <code>string multicast_group_id = 1 [json_name = "multicastGroupID"];</code>
     * @return string
     */
    public function getMulticastGroupId()
    {
        return $this->multicast_group_id;
    }

    /**
     * Multicast-group ID (string formatted UUID).
     *
     * Generated from protobuf field <code>string multicast_group_id = 1 [json_name = "multicastGroupID"];</code>
     * @param string $var
     * @return $this
     */
    public function setMulticastGroupId($var)
    {
        GPBUtil::checkString($var, True);
        $this->multicast_group_id = $var;

        return $this;
    }

    /**
     * Downlink frame-counter.
     * This will be automatically set on enqueue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 2;</code>
     * @return int
     */
    public function getFCnt()
    {
        return $this->f_cnt;
    }

    /**
     * Downlink frame-counter.
     * This will be automatically set on enqueue.
     *
     * Generated from protobuf field <code>uint32 f_cnt = 2;</code>
     * @param int $var
     * @return $this
     */
    public function setFCnt($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_cnt = $var;

        return $this;
    }

    /**
     * FPort used (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     * @return int
     */
    public function getFPort()
    {
        return $this->f_port;
    }

    /**
     * FPort used (must be > 0).
     *
     * Generated from protobuf field <code>uint32 f_port = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setFPort($var)
    {
        GPBUtil::checkUint32($var);
        $this->f_port = $var;

        return $this;
    }

    /**
     * Base64 encoded data.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @return string
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Base64 encoded data.
     *
     * Generated from protobuf field <code>bytes data = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setData($var)
    {
        GPBUtil::checkString($var, False);
        $this->data = $var;

        return $this;
    }

}

