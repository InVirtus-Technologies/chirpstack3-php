<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: api/device_profile_template.proto

namespace Chirpstack\Api;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>api.DeviceProfileTemplate</code>
 */
class DeviceProfileTemplate extends \Google\Protobuf\Internal\Message
{
    /**
     * Device-profile template ID.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     */
    protected $id = '';
    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     */
    protected $name = '';
    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     */
    protected $description = '';
    /**
     * Vendor.
     *
     * Generated from protobuf field <code>string vendor = 4;</code>
     */
    protected $vendor = '';
    /**
     * Firmware.
     *
     * Generated from protobuf field <code>string firmware = 5;</code>
     */
    protected $firmware = '';
    /**
     * Region.
     *
     * Generated from protobuf field <code>.common.Region region = 6;</code>
     */
    protected $region = 0;
    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>.common.MacVersion mac_version = 7;</code>
     */
    protected $mac_version = 0;
    /**
     * Regional parameters revision.
     *
     * Generated from protobuf field <code>.common.RegParamsRevision reg_params_revision = 8;</code>
     */
    protected $reg_params_revision = 0;
    /**
     * ADR algorithm ID.
     *
     * Generated from protobuf field <code>string adr_algorithm_id = 9;</code>
     */
    protected $adr_algorithm_id = '';
    /**
     * Payload codec runtime.
     *
     * Generated from protobuf field <code>.api.CodecRuntime payload_codec_runtime = 10;</code>
     */
    protected $payload_codec_runtime = 0;
    /**
     * Payload codec script.
     *
     * Generated from protobuf field <code>string payload_codec_script = 11;</code>
     */
    protected $payload_codec_script = '';
    /**
     * Flush queue on device activation.
     *
     * Generated from protobuf field <code>bool flush_queue_on_activate = 12;</code>
     */
    protected $flush_queue_on_activate = false;
    /**
     * Uplink interval (seconds).
     * This defines the expected uplink interval which the device uses for
     * communication. When the uplink interval has expired and no uplink has
     * been received, the device is considered inactive.
     *
     * Generated from protobuf field <code>uint32 uplink_interval = 13;</code>
     */
    protected $uplink_interval = 0;
    /**
     * Device-status request interval (times / day).
     * This defines the times per day that ChirpStack will request the device-status
     * from the device.
     *
     * Generated from protobuf field <code>uint32 device_status_req_interval = 14;</code>
     */
    protected $device_status_req_interval = 0;
    /**
     * Supports OTAA.
     *
     * Generated from protobuf field <code>bool supports_otaa = 15;</code>
     */
    protected $supports_otaa = false;
    /**
     * Supports Class B.
     *
     * Generated from protobuf field <code>bool supports_class_b = 16;</code>
     */
    protected $supports_class_b = false;
    /**
     * Supports Class-C.
     *
     * Generated from protobuf field <code>bool supports_class_c = 17;</code>
     */
    protected $supports_class_c = false;
    /**
     * Class-B timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_b_timeout = 18;</code>
     */
    protected $class_b_timeout = 0;
    /**
     * Class-B ping-slots per beacon period.
     * Valid options are: 0 - 7.
     * The actual number of ping-slots per beacon period equals to 2^k.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_nb_k = 19;</code>
     */
    protected $class_b_ping_slot_nb_k = 0;
    /**
     * Class-B ping-slot DR.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_dr = 20;</code>
     */
    protected $class_b_ping_slot_dr = 0;
    /**
     * Class-B ping-slot freq (Hz).
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_freq = 21;</code>
     */
    protected $class_b_ping_slot_freq = 0;
    /**
     * Class-C timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_c_timeout = 22;</code>
     */
    protected $class_c_timeout = 0;
    /**
     * RX1 delay (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_delay = 23;</code>
     */
    protected $abp_rx1_delay = 0;
    /**
     * RX1 DR offset (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_dr_offset = 24;</code>
     */
    protected $abp_rx1_dr_offset = 0;
    /**
     * RX2 DR (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_dr = 25;</code>
     */
    protected $abp_rx2_dr = 0;
    /**
     * RX2 frequency (for ABP, Hz).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_freq = 26;</code>
     */
    protected $abp_rx2_freq = 0;
    /**
     * User defined tags.
     *
     * Generated from protobuf field <code>map<string, string> tags = 27;</code>
     */
    private $tags;
    /**
     * Measurements.
     * If defined, ChirpStack will visualize these metrics in the web-interface.
     *
     * Generated from protobuf field <code>map<string, .api.Measurement> measurements = 28;</code>
     */
    private $measurements;
    /**
     * Auto-detect measurements.
     * If set to true, measurements will be automatically added based on the
     * keys of the decoded payload. In cases where the decoded payload contains
     * random keys in the data, you want to set this to false.
     *
     * Generated from protobuf field <code>bool auto_detect_measurements = 29;</code>
     */
    protected $auto_detect_measurements = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $id
     *           Device-profile template ID.
     *     @type string $name
     *           Name.
     *     @type string $description
     *           Description.
     *     @type string $vendor
     *           Vendor.
     *     @type string $firmware
     *           Firmware.
     *     @type int $region
     *           Region.
     *     @type int $mac_version
     *           LoRaWAN mac-version.
     *     @type int $reg_params_revision
     *           Regional parameters revision.
     *     @type string $adr_algorithm_id
     *           ADR algorithm ID.
     *     @type int $payload_codec_runtime
     *           Payload codec runtime.
     *     @type string $payload_codec_script
     *           Payload codec script.
     *     @type bool $flush_queue_on_activate
     *           Flush queue on device activation.
     *     @type int $uplink_interval
     *           Uplink interval (seconds).
     *           This defines the expected uplink interval which the device uses for
     *           communication. When the uplink interval has expired and no uplink has
     *           been received, the device is considered inactive.
     *     @type int $device_status_req_interval
     *           Device-status request interval (times / day).
     *           This defines the times per day that ChirpStack will request the device-status
     *           from the device.
     *     @type bool $supports_otaa
     *           Supports OTAA.
     *     @type bool $supports_class_b
     *           Supports Class B.
     *     @type bool $supports_class_c
     *           Supports Class-C.
     *     @type int $class_b_timeout
     *           Class-B timeout (seconds).
     *           This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *     @type int $class_b_ping_slot_nb_k
     *           Class-B ping-slots per beacon period.
     *           Valid options are: 0 - 7.
     *           The actual number of ping-slots per beacon period equals to 2^k.
     *     @type int $class_b_ping_slot_dr
     *           Class-B ping-slot DR.
     *     @type int $class_b_ping_slot_freq
     *           Class-B ping-slot freq (Hz).
     *     @type int $class_c_timeout
     *           Class-C timeout (seconds).
     *           This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *     @type int $abp_rx1_delay
     *           RX1 delay (for ABP).
     *     @type int $abp_rx1_dr_offset
     *           RX1 DR offset (for ABP).
     *     @type int $abp_rx2_dr
     *           RX2 DR (for ABP).
     *     @type int $abp_rx2_freq
     *           RX2 frequency (for ABP, Hz).
     *     @type array|\Google\Protobuf\Internal\MapField $tags
     *           User defined tags.
     *     @type array|\Google\Protobuf\Internal\MapField $measurements
     *           Measurements.
     *           If defined, ChirpStack will visualize these metrics in the web-interface.
     *     @type bool $auto_detect_measurements
     *           Auto-detect measurements.
     *           If set to true, measurements will be automatically added based on the
     *           keys of the decoded payload. In cases where the decoded payload contains
     *           random keys in the data, you want to set this to false.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Chirpstack\Api\DeviceProfileTemplate::initOnce();
        parent::__construct($data);
    }

    /**
     * Device-profile template ID.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @return string
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Device-profile template ID.
     *
     * Generated from protobuf field <code>string id = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setId($var)
    {
        GPBUtil::checkString($var, True);
        $this->id = $var;

        return $this;
    }

    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Name.
     *
     * Generated from protobuf field <code>string name = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Description.
     *
     * Generated from protobuf field <code>string description = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setDescription($var)
    {
        GPBUtil::checkString($var, True);
        $this->description = $var;

        return $this;
    }

    /**
     * Vendor.
     *
     * Generated from protobuf field <code>string vendor = 4;</code>
     * @return string
     */
    public function getVendor()
    {
        return $this->vendor;
    }

    /**
     * Vendor.
     *
     * Generated from protobuf field <code>string vendor = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setVendor($var)
    {
        GPBUtil::checkString($var, True);
        $this->vendor = $var;

        return $this;
    }

    /**
     * Firmware.
     *
     * Generated from protobuf field <code>string firmware = 5;</code>
     * @return string
     */
    public function getFirmware()
    {
        return $this->firmware;
    }

    /**
     * Firmware.
     *
     * Generated from protobuf field <code>string firmware = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setFirmware($var)
    {
        GPBUtil::checkString($var, True);
        $this->firmware = $var;

        return $this;
    }

    /**
     * Region.
     *
     * Generated from protobuf field <code>.common.Region region = 6;</code>
     * @return int
     */
    public function getRegion()
    {
        return $this->region;
    }

    /**
     * Region.
     *
     * Generated from protobuf field <code>.common.Region region = 6;</code>
     * @param int $var
     * @return $this
     */
    public function setRegion($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Common\Region::class);
        $this->region = $var;

        return $this;
    }

    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>.common.MacVersion mac_version = 7;</code>
     * @return int
     */
    public function getMacVersion()
    {
        return $this->mac_version;
    }

    /**
     * LoRaWAN mac-version.
     *
     * Generated from protobuf field <code>.common.MacVersion mac_version = 7;</code>
     * @param int $var
     * @return $this
     */
    public function setMacVersion($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Common\MacVersion::class);
        $this->mac_version = $var;

        return $this;
    }

    /**
     * Regional parameters revision.
     *
     * Generated from protobuf field <code>.common.RegParamsRevision reg_params_revision = 8;</code>
     * @return int
     */
    public function getRegParamsRevision()
    {
        return $this->reg_params_revision;
    }

    /**
     * Regional parameters revision.
     *
     * Generated from protobuf field <code>.common.RegParamsRevision reg_params_revision = 8;</code>
     * @param int $var
     * @return $this
     */
    public function setRegParamsRevision($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Common\RegParamsRevision::class);
        $this->reg_params_revision = $var;

        return $this;
    }

    /**
     * ADR algorithm ID.
     *
     * Generated from protobuf field <code>string adr_algorithm_id = 9;</code>
     * @return string
     */
    public function getAdrAlgorithmId()
    {
        return $this->adr_algorithm_id;
    }

    /**
     * ADR algorithm ID.
     *
     * Generated from protobuf field <code>string adr_algorithm_id = 9;</code>
     * @param string $var
     * @return $this
     */
    public function setAdrAlgorithmId($var)
    {
        GPBUtil::checkString($var, True);
        $this->adr_algorithm_id = $var;

        return $this;
    }

    /**
     * Payload codec runtime.
     *
     * Generated from protobuf field <code>.api.CodecRuntime payload_codec_runtime = 10;</code>
     * @return int
     */
    public function getPayloadCodecRuntime()
    {
        return $this->payload_codec_runtime;
    }

    /**
     * Payload codec runtime.
     *
     * Generated from protobuf field <code>.api.CodecRuntime payload_codec_runtime = 10;</code>
     * @param int $var
     * @return $this
     */
    public function setPayloadCodecRuntime($var)
    {
        GPBUtil::checkEnum($var, \Chirpstack\Api\CodecRuntime::class);
        $this->payload_codec_runtime = $var;

        return $this;
    }

    /**
     * Payload codec script.
     *
     * Generated from protobuf field <code>string payload_codec_script = 11;</code>
     * @return string
     */
    public function getPayloadCodecScript()
    {
        return $this->payload_codec_script;
    }

    /**
     * Payload codec script.
     *
     * Generated from protobuf field <code>string payload_codec_script = 11;</code>
     * @param string $var
     * @return $this
     */
    public function setPayloadCodecScript($var)
    {
        GPBUtil::checkString($var, True);
        $this->payload_codec_script = $var;

        return $this;
    }

    /**
     * Flush queue on device activation.
     *
     * Generated from protobuf field <code>bool flush_queue_on_activate = 12;</code>
     * @return bool
     */
    public function getFlushQueueOnActivate()
    {
        return $this->flush_queue_on_activate;
    }

    /**
     * Flush queue on device activation.
     *
     * Generated from protobuf field <code>bool flush_queue_on_activate = 12;</code>
     * @param bool $var
     * @return $this
     */
    public function setFlushQueueOnActivate($var)
    {
        GPBUtil::checkBool($var);
        $this->flush_queue_on_activate = $var;

        return $this;
    }

    /**
     * Uplink interval (seconds).
     * This defines the expected uplink interval which the device uses for
     * communication. When the uplink interval has expired and no uplink has
     * been received, the device is considered inactive.
     *
     * Generated from protobuf field <code>uint32 uplink_interval = 13;</code>
     * @return int
     */
    public function getUplinkInterval()
    {
        return $this->uplink_interval;
    }

    /**
     * Uplink interval (seconds).
     * This defines the expected uplink interval which the device uses for
     * communication. When the uplink interval has expired and no uplink has
     * been received, the device is considered inactive.
     *
     * Generated from protobuf field <code>uint32 uplink_interval = 13;</code>
     * @param int $var
     * @return $this
     */
    public function setUplinkInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->uplink_interval = $var;

        return $this;
    }

    /**
     * Device-status request interval (times / day).
     * This defines the times per day that ChirpStack will request the device-status
     * from the device.
     *
     * Generated from protobuf field <code>uint32 device_status_req_interval = 14;</code>
     * @return int
     */
    public function getDeviceStatusReqInterval()
    {
        return $this->device_status_req_interval;
    }

    /**
     * Device-status request interval (times / day).
     * This defines the times per day that ChirpStack will request the device-status
     * from the device.
     *
     * Generated from protobuf field <code>uint32 device_status_req_interval = 14;</code>
     * @param int $var
     * @return $this
     */
    public function setDeviceStatusReqInterval($var)
    {
        GPBUtil::checkUint32($var);
        $this->device_status_req_interval = $var;

        return $this;
    }

    /**
     * Supports OTAA.
     *
     * Generated from protobuf field <code>bool supports_otaa = 15;</code>
     * @return bool
     */
    public function getSupportsOtaa()
    {
        return $this->supports_otaa;
    }

    /**
     * Supports OTAA.
     *
     * Generated from protobuf field <code>bool supports_otaa = 15;</code>
     * @param bool $var
     * @return $this
     */
    public function setSupportsOtaa($var)
    {
        GPBUtil::checkBool($var);
        $this->supports_otaa = $var;

        return $this;
    }

    /**
     * Supports Class B.
     *
     * Generated from protobuf field <code>bool supports_class_b = 16;</code>
     * @return bool
     */
    public function getSupportsClassB()
    {
        return $this->supports_class_b;
    }

    /**
     * Supports Class B.
     *
     * Generated from protobuf field <code>bool supports_class_b = 16;</code>
     * @param bool $var
     * @return $this
     */
    public function setSupportsClassB($var)
    {
        GPBUtil::checkBool($var);
        $this->supports_class_b = $var;

        return $this;
    }

    /**
     * Supports Class-C.
     *
     * Generated from protobuf field <code>bool supports_class_c = 17;</code>
     * @return bool
     */
    public function getSupportsClassC()
    {
        return $this->supports_class_c;
    }

    /**
     * Supports Class-C.
     *
     * Generated from protobuf field <code>bool supports_class_c = 17;</code>
     * @param bool $var
     * @return $this
     */
    public function setSupportsClassC($var)
    {
        GPBUtil::checkBool($var);
        $this->supports_class_c = $var;

        return $this;
    }

    /**
     * Class-B timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_b_timeout = 18;</code>
     * @return int
     */
    public function getClassBTimeout()
    {
        return $this->class_b_timeout;
    }

    /**
     * Class-B timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_b_timeout = 18;</code>
     * @param int $var
     * @return $this
     */
    public function setClassBTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->class_b_timeout = $var;

        return $this;
    }

    /**
     * Class-B ping-slots per beacon period.
     * Valid options are: 0 - 7.
     * The actual number of ping-slots per beacon period equals to 2^k.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_nb_k = 19;</code>
     * @return int
     */
    public function getClassBPingSlotNbK()
    {
        return $this->class_b_ping_slot_nb_k;
    }

    /**
     * Class-B ping-slots per beacon period.
     * Valid options are: 0 - 7.
     * The actual number of ping-slots per beacon period equals to 2^k.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_nb_k = 19;</code>
     * @param int $var
     * @return $this
     */
    public function setClassBPingSlotNbK($var)
    {
        GPBUtil::checkUint32($var);
        $this->class_b_ping_slot_nb_k = $var;

        return $this;
    }

    /**
     * Class-B ping-slot DR.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_dr = 20;</code>
     * @return int
     */
    public function getClassBPingSlotDr()
    {
        return $this->class_b_ping_slot_dr;
    }

    /**
     * Class-B ping-slot DR.
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_dr = 20;</code>
     * @param int $var
     * @return $this
     */
    public function setClassBPingSlotDr($var)
    {
        GPBUtil::checkUint32($var);
        $this->class_b_ping_slot_dr = $var;

        return $this;
    }

    /**
     * Class-B ping-slot freq (Hz).
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_freq = 21;</code>
     * @return int
     */
    public function getClassBPingSlotFreq()
    {
        return $this->class_b_ping_slot_freq;
    }

    /**
     * Class-B ping-slot freq (Hz).
     *
     * Generated from protobuf field <code>uint32 class_b_ping_slot_freq = 21;</code>
     * @param int $var
     * @return $this
     */
    public function setClassBPingSlotFreq($var)
    {
        GPBUtil::checkUint32($var);
        $this->class_b_ping_slot_freq = $var;

        return $this;
    }

    /**
     * Class-C timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_c_timeout = 22;</code>
     * @return int
     */
    public function getClassCTimeout()
    {
        return $this->class_c_timeout;
    }

    /**
     * Class-C timeout (seconds).
     * This is the maximum time ChirpStack will wait to receive an acknowledgement from the device (if requested).
     *
     * Generated from protobuf field <code>uint32 class_c_timeout = 22;</code>
     * @param int $var
     * @return $this
     */
    public function setClassCTimeout($var)
    {
        GPBUtil::checkUint32($var);
        $this->class_c_timeout = $var;

        return $this;
    }

    /**
     * RX1 delay (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_delay = 23;</code>
     * @return int
     */
    public function getAbpRx1Delay()
    {
        return $this->abp_rx1_delay;
    }

    /**
     * RX1 delay (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_delay = 23;</code>
     * @param int $var
     * @return $this
     */
    public function setAbpRx1Delay($var)
    {
        GPBUtil::checkUint32($var);
        $this->abp_rx1_delay = $var;

        return $this;
    }

    /**
     * RX1 DR offset (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_dr_offset = 24;</code>
     * @return int
     */
    public function getAbpRx1DrOffset()
    {
        return $this->abp_rx1_dr_offset;
    }

    /**
     * RX1 DR offset (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx1_dr_offset = 24;</code>
     * @param int $var
     * @return $this
     */
    public function setAbpRx1DrOffset($var)
    {
        GPBUtil::checkUint32($var);
        $this->abp_rx1_dr_offset = $var;

        return $this;
    }

    /**
     * RX2 DR (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_dr = 25;</code>
     * @return int
     */
    public function getAbpRx2Dr()
    {
        return $this->abp_rx2_dr;
    }

    /**
     * RX2 DR (for ABP).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_dr = 25;</code>
     * @param int $var
     * @return $this
     */
    public function setAbpRx2Dr($var)
    {
        GPBUtil::checkUint32($var);
        $this->abp_rx2_dr = $var;

        return $this;
    }

    /**
     * RX2 frequency (for ABP, Hz).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_freq = 26;</code>
     * @return int
     */
    public function getAbpRx2Freq()
    {
        return $this->abp_rx2_freq;
    }

    /**
     * RX2 frequency (for ABP, Hz).
     *
     * Generated from protobuf field <code>uint32 abp_rx2_freq = 26;</code>
     * @param int $var
     * @return $this
     */
    public function setAbpRx2Freq($var)
    {
        GPBUtil::checkUint32($var);
        $this->abp_rx2_freq = $var;

        return $this;
    }

    /**
     * User defined tags.
     *
     * Generated from protobuf field <code>map<string, string> tags = 27;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getTags()
    {
        return $this->tags;
    }

    /**
     * User defined tags.
     *
     * Generated from protobuf field <code>map<string, string> tags = 27;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setTags($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::STRING);
        $this->tags = $arr;

        return $this;
    }

    /**
     * Measurements.
     * If defined, ChirpStack will visualize these metrics in the web-interface.
     *
     * Generated from protobuf field <code>map<string, .api.Measurement> measurements = 28;</code>
     * @return \Google\Protobuf\Internal\MapField
     */
    public function getMeasurements()
    {
        return $this->measurements;
    }

    /**
     * Measurements.
     * If defined, ChirpStack will visualize these metrics in the web-interface.
     *
     * Generated from protobuf field <code>map<string, .api.Measurement> measurements = 28;</code>
     * @param array|\Google\Protobuf\Internal\MapField $var
     * @return $this
     */
    public function setMeasurements($var)
    {
        $arr = GPBUtil::checkMapField($var, \Google\Protobuf\Internal\GPBType::STRING, \Google\Protobuf\Internal\GPBType::MESSAGE, \Chirpstack\Api\Measurement::class);
        $this->measurements = $arr;

        return $this;
    }

    /**
     * Auto-detect measurements.
     * If set to true, measurements will be automatically added based on the
     * keys of the decoded payload. In cases where the decoded payload contains
     * random keys in the data, you want to set this to false.
     *
     * Generated from protobuf field <code>bool auto_detect_measurements = 29;</code>
     * @return bool
     */
    public function getAutoDetectMeasurements()
    {
        return $this->auto_detect_measurements;
    }

    /**
     * Auto-detect measurements.
     * If set to true, measurements will be automatically added based on the
     * keys of the decoded payload. In cases where the decoded payload contains
     * random keys in the data, you want to set this to false.
     *
     * Generated from protobuf field <code>bool auto_detect_measurements = 29;</code>
     * @param bool $var
     * @return $this
     */
    public function setAutoDetectMeasurements($var)
    {
        GPBUtil::checkBool($var);
        $this->auto_detect_measurements = $var;

        return $this;
    }

}

